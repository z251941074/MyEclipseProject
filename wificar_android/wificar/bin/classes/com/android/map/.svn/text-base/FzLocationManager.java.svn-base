package com.android.fzmap.map;

import android.content.Context;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.util.Log;

/**
 * @author why
 */
public class FzLocationManager {
	private final String TAG = "YongcheLocationManager";
	private static Context mContext;
	private LocationManager gpsLocationManager;
	private LocationManager networkLocationManager;
	private static final int MINTIME = 2000;
	private static final int MININSTANCE = 2;
	private static FzLocationManager instance;
	private Location lastLocation = null;
	private static LocationCallBack mCallback;
	
	public static void init(Context c , LocationCallBack callback) {
		mContext = c;
		mCallback = callback;
	}

	private FzLocationManager() {
		// Gps 定位
		gpsLocationManager = (LocationManager) mContext
				.getSystemService(Context.LOCATION_SERVICE);
		Location gpsLocation = gpsLocationManager
				.getLastKnownLocation(LocationManager.GPS_PROVIDER);
		updateLocation(gpsLocation);
		gpsLocationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,
				MINTIME, MININSTANCE, locationListener);
        // 基站定位
		networkLocationManager = (LocationManager) mContext
				.getSystemService(Context.LOCATION_SERVICE);
		Location networkLocation = gpsLocationManager
				.getLastKnownLocation(LocationManager.GPS_PROVIDER);
		updateLocation(networkLocation);
		networkLocationManager.requestLocationUpdates(
				LocationManager.NETWORK_PROVIDER, MINTIME, MININSTANCE,
				locationListener);
	}

	public static FzLocationManager getInstance() {
		if (null == instance) {
			instance = new FzLocationManager();
		}
		return instance;
	}

	private void updateLocation(Location location) {
		boolean better = isBetterLocation(location ,lastLocation);
		if(better){
			lastLocation = location;
			mCallback.onCurrentLocation(location);
		}
	}

	public void autoSendLocation(){
		Log.d(TAG , "autoSendLocation");
		if(mCallback != null && lastLocation != null){
			mCallback.onCurrentLocation(lastLocation);
		}
	}
	
	private final LocationListener locationListener = new LocationListener() {
		@Override
		public void onStatusChanged(String provider, int status, Bundle extras) {
		}

		@Override
		public void onProviderEnabled(String provider) {
		}

		@Override
		public void onProviderDisabled(String provider) {
		}

		@Override
		public void onLocationChanged(Location location) {
			Log.d(TAG, "onLocationChanged");
			updateLocation(location);
		}
	};

	public Location getMyLocation() {
		return lastLocation;
	}
	
    private static int ENOUGH_LONG = 1000 * 60;	 
	
	/** Determines whether one Location reading is better than the current Location fix 
	  * Copy from android developer site
	  * @param location  The new Location that you want to evaluate 
	  * @param currentBestLocation  The current Location fix, to which you want to compare the new one 
	  */ 
	static boolean isBetterLocation(Location location, Location currentBestLocation) { 
	    if (currentBestLocation == null) { 
	        // A new location is always better than no location 
	        return true; 
	    } 
	 
	    // Check whether the new location fix is newer or older 
	    long timeDelta = location.getTime() - currentBestLocation.getTime(); 
	    boolean isSignificantlyNewer = timeDelta > ENOUGH_LONG; 
	    boolean isSignificantlyOlder = timeDelta < -ENOUGH_LONG; 
	    boolean isNewer = timeDelta > 0; 
	 
	    // If it's been more than max interval since the current location, use the new location 
	    // because the user has likely moved 
	    if (isSignificantlyNewer) { 
	        return true; 
	    // If the new location is more than max interval older, it must be worse 
	    } else if (isSignificantlyOlder) { 
	        return false; 
	    } 
	 
	    // Check whether the new location fix is more or less accurate 
	    int accuracyDelta = (int) (location.getAccuracy() - currentBestLocation.getAccuracy()); 
	    boolean isLessAccurate = accuracyDelta > 0; 
	    boolean isMoreAccurate = accuracyDelta < 0; 
	    boolean isSignificantlyLessAccurate = accuracyDelta > 200; 
	 
	    // Check if the old and new location are from the same provider 
	    boolean isFromSameProvider = isSameProvider(location.getProvider(), 
	            currentBestLocation.getProvider()); 
	 
	    // Determine location quality using a combination of timeliness and accuracy 
	    if (isMoreAccurate) { 
	        return true; 
	    } else if (isNewer && !isLessAccurate) { 
	        return true; 
	    } else if (isNewer && !isSignificantlyLessAccurate && isFromSameProvider) { 
	        return true; 
	    } 
	    return false; 
	} 
	 
	/** Checks whether two providers are the same */ 
	static boolean isSameProvider(String provider1, String provider2) { 
	    if (provider1 == null) { 
	      return provider2 == null; 
	    } 
	    return provider1.equals(provider2); 
	}
	
	public interface LocationCallBack{
		/**
		 * 当前位置
		 * @param location 
		 */
		void onCurrentLocation(Location location);
	}
	
	public void destoryLocationManager(){
		Log.d(TAG, "destoryLocationManager");
		gpsLocationManager.removeUpdates(locationListener);
		networkLocationManager.removeUpdates(locationListener);
	}
}
